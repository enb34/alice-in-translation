start = book
book = element book { bookTitle, author, translator*, chapter+ }
bookTitle = element bookTitle { text }
author = element author { text }
translator = element translator { text }
chapter = element chapter { n, chapterTitle, (p | break | song)+ }
n = attribute n { text }
chapterTitle = element title { text }
break = element break { text }
p =
    element p {
        mixed {
            (parenthesis | word | phrase | rp | onomatopoeia | song | emp | foreign | cultural | repetition)*
        }
    }
parenthesis =
    element parenthesis {
        mixed { (word | phrase | emp | cultural | rp )* }
    }
word = element word { mixed { ( kind, emp* ) } }
kind = attribute kind { "iu" | "ns" | "uc" | "pow" }
phrase = element phrase { mixed { ( type, ( emp | word )* ) } }
type = attribute type { "iu" | "ns" | "uc" | "pow" }
rp =
    element rp { rpn, stat*, 
        mixed { rhyme+ }
    }
rpn = attribute rpn { xsd:int }
stat = attribute stat {"incomplete"}
rhyme =
    element rhyme {
        mixed { rn, def, emp* }
    }
def = attribute def { "true" | "trans" | "incomp" }
rn = attribute rn { xsd:int }
onomatopoeia = element onomatopoeia { text }
song =
    element song {
        mixed { (rp | word | phrase | stanza | onomatopoeia | emp)* }
    }
stanza =
    element stanza {
        mixed { (l | rp | word | phrase | onomatopoeia | emp | parenthesis)* }
    }
l =
    element l {
        mixed { (rp | word | phrase | onomatopoeia | emp | parenthesis)* }
    }
emp = element emp { text }
foreign = element foreign { language, text }
language = attribute language { text }
cultural =
    element cultural {
        mixed { (word | phrase | rp | song | onomatopoeia | emp)* }
    }
repetition = element repetition {rep, text}
rep= attribute rep {text}


# Definition of terms:
# word/phrase kind/type: "iu"="incorrect usage" "ns"="nonsense words" "uc"="uncommon/unconventional usage" "pow"="play on words"
# rhyme def: "true"="true rhyme, the content rhymes" "trans"="translation of the rhyme, if the translation does not rhyme itself"
